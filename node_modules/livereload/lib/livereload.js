// Generated by CoffeeScript 1.10.0
(function() {
  var Server, chokidar, defaultExclusions, defaultExts, defaultPort, fs, http, https, path, protocol_version, url, ws;

  fs = require('fs');

  path = require('path');

  ws = require('ws');

  http = require('http');

  https = require('https');

  url = require('url');

  chokidar = require('chokidar');

  protocol_version = '1.6';

  defaultPort = 35729;

  defaultExts = ['html', 'css', 'js', 'png', 'gif', 'jpg', 'php', 'php5', 'py', 'rb', 'erb', 'coffee'];

  defaultExclusions = [/\\.git\//, /\\.svn\//, /\\.hg\//];

  Server = (function() {
    function Server(config1) {
      var base, base1, base2, base3, base4, base5, base6, base7, base8;
      this.config = config1;
      if (this.config == null) {
        this.config = {};
      }
      if ((base = this.config).version == null) {
        base.version = protocol_version;
      }
      if ((base1 = this.config).port == null) {
        base1.port = defaultPort;
      }
      if ((base2 = this.config).exts == null) {
        base2.exts = [];
      }
      if ((base3 = this.config).exclusions == null) {
        base3.exclusions = [];
      }
      this.config.exts = this.config.exts.concat(defaultExts);
      this.config.exclusions = this.config.exclusions.concat(defaultExclusions);
      if ((base4 = this.config).applyJSLive == null) {
        base4.applyJSLive = false;
      }
      if ((base5 = this.config).applyCSSLive == null) {
        base5.applyCSSLive = true;
      }
      if ((base6 = this.config).applyImgLive == null) {
        base6.applyImgLive = true;
      }
      if ((base7 = this.config).originalPath == null) {
        base7.originalPath = '';
      }
      if ((base8 = this.config).overrideURL == null) {
        base8.overrideURL = '';
      }
      this.sockets = [];
    }

    Server.prototype.listen = function() {
      this.debug("LiveReload is waiting for browser to connect.");
      if (this.config.server) {
        this.config.server.listen(this.config.port);
        this.server = new ws.Server({
          server: this.config.server
        });
      } else {
        this.server = new ws.Server({
          port: this.config.port
        });
      }
      this.server.on('connection', this.onConnection.bind(this));
      return this.server.on('close', this.onClose.bind(this));
    };

    Server.prototype.onConnection = function(socket) {
      this.debug("Browser connected.");
      socket.send("!!ver:" + this.config.version);
      socket.on('message', (function(_this) {
        return function(message) {
          if (_this.config.debug) {
            return _this.debug("Browser URL: " + message);
          }
        };
      })(this));
      return socket.on('error', (function(_this) {
        return function(err) {
          return _this.debug("Error in client socket: " + err);
        };
      })(this));
    };

    Server.prototype.onClose = function(socket) {
      this.debug("Browser disconnected.");
      return this.sockets.splice(socket, 1);
    };

    Server.prototype.watch = function(paths) {
      this.watcher = chokidar.watch(paths, {
        ignoreInitial: true,
        ignored: this.config.exclusions
      });
      this.watcher.on('add', (function(_this) {
        return function(path) {
          return _this.filterRefresh(path);
        };
      })(this));
      this.watcher.on('change', (function(_this) {
        return function(path) {
          return _this.filterRefresh(path);
        };
      })(this));
      return this.watcher.on('unlink', (function(_this) {
        return function(path) {
          return _this.filterRefresh(path);
        };
      })(this));
    };

    Server.prototype.filterRefresh = function(filepath) {
      var ext, exts, fileext, i, len, results;
      exts = this.config.exts;
      fileext = path.extname(filepath).substring(1);
      results = [];
      for (i = 0, len = exts.length; i < len; i++) {
        ext = exts[i];
        if (!(ext === fileext)) {
          continue;
        }
        this.refresh(filepath);
        break;
      }
      return results;
    };

    Server.prototype.refresh = function(filepath) {
      var data, i, len, ref, results, socket;
      this.debug("Refresh: " + filepath);
      data = JSON.stringify([
        'refresh', {
          path: filepath,
          apply_js_live: this.config.applyJSLive,
          apply_css_live: this.config.applyCSSLive,
          apply_img_live: this.config.applyImgLive,
          original_path: this.config.originalPath,
          override_url: this.config.overrideURL
        }
      ]);
      ref = this.server.clients;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        socket = ref[i];
        results.push(socket.send(data, (function(_this) {
          return function(error) {
            if (error) {
              return _this.debug(error);
            }
          };
        })(this)));
      }
      return results;
    };

    Server.prototype.debug = function(str) {
      if (this.config.debug) {
        return console.log(str + "\n");
      }
    };

    return Server;

  })();

  exports.createServer = function(config) {
    var app, requestHandler, server;
    if (config == null) {
      config = {};
    }
    requestHandler = function(req, res) {
      if (url.parse(req.url).pathname === '/livereload.js') {
        res.writeHead(200, {
          'Content-Type': 'text/javascript'
        });
        return res.end(fs.readFileSync(__dirname + '/../ext/livereload.js'));
      }
    };
    if (config.https == null) {
      app = http.createServer(requestHandler);
    } else {
      app = https.createServer(config.https, requestHandler);
    }
    if (config.server == null) {
      config.server = app;
    }
    server = new Server(config);
    server.listen();
    return server;
  };

}).call(this);
